- name: Delete root pw file /root/.pw (if present)
  file:
    path: /root/.pw
    state: absent
  tags: [ harden, always ]


- name: Update APT package cache
  apt:
    update_cache: true
    cache_valid_time: 0
  retries: 2
  delay: 5
  tags: [ harden, apt, always ]

- name: Upgrade APT to the latest packages
  apt:
    upgrade: safe
  retries: 2
  delay: 5
  tags: [ harden, apt, always ]

- name: Install required packages
  apt:
    state: present
    pkg: "{{ harden_linux_required_packages + harden_linux_required_packages_user | default([])  }}"
  retries: 2
  delay: 5
  tags: [ harden, apt, always ]

- import_role:
    name: ansible-role-iptables
  tags: [ harden, iptables, always ]

- name: Drop all ipv6 traffic
  iptables:
    ip_version: ipv6
    chain: "{{ item }}"
    policy: DROP
  with_items: [ 'INPUT', 'FORWARD', 'OUTPUT' ]
  tags: [ harden, iptables, always ]

- name: Install ntp package as requested
  package:
    state: present
    pkg: "{{ harden_linux_ntp }}"
  retries: 2
  delay: 5
  when: harden_linux_ntp is defined
  tags: [ harden, ntp, always ]

- name: Set NTP config (depends on selected NTP package)
  set_fact:
    harden_linux_ntp_config: >-
      {% if harden_linux_ntp == "openntpd" -%}/etc/openntpd/ntpd.conf
      {% elif harden_linux_ntp == "ntpd" -%}/etc/ntpd.conf
      {% elif harden_linux_ntp == "chrony" %}/etc/chrony/chrony.conf
      {%- endif %}
  when: harden_linux_ntp is defined
  tags: [ harden, ntp, always ]

- name: Amend ntp configuration if requested
  lineinfile:
    dest: "{{ harden_linux_ntp_config }}"
    regexp: "{{ item.key }}"
    line: "{{ item.value }}"
    state: "present"
  notify: "restart ntp"
  when: harden_linux_ntp is defined
  with_dict:
    - "{{ harden_linux_ntp_settings }}"
  tags: [ harden, ntp, always ]

- name: Add deploy user
  user:
    name: "{{ harden_linux_deploy_user }}"
    password: "{{ harden_linux_deploy_user_password }}"
    uid: "{{ harden_linux_deploy_user_uid }}"
    groups: "{{ harden_linux_deploy_user_groups | default(omit) }}"
    shell: "{{ harden_linux_deploy_user_shell }}"
    home: "{{ harden_linux_deploy_user_home }}"
  tags: [ harden, users, always ]

- name: Add authorized keys for deploy user
  authorized_key:
    user: "{{ harden_linux_deploy_user }}"
    key: "{{ lookup('file', item) }}"
  with_items:
    - "{{ harden_linux_deploy_user_public_keys }}"
  when: harden_linux_deploy_user_public_keys is defined
  tags: [ harden, users, always ]

- name: Add deploy user to sudoers
  lineinfile:
    dest: /etc/sudoers
    regexp: "{{ harden_linux_deploy_user }} ALL"
    line: "{{ harden_linux_deploy_user }} ALL=(ALL) NOPASSWD:ALL"
    state: present
  tags: [ harden, users, always ]

- name: Adjust APT update intervals
  copy:
    src: etc/apt/apt.conf.d/10periodic
    dest: /etc/apt/apt.conf.d/10periodic
    owner: root
    group: root
    mode: 0644
  tags: [ harden, apt, always ]

- name: Combine harden_linux_sshd_settings and harden_linux_sshd_settings_user (if defined)
  set_fact:
    harden_linux_sshd_settings: "{{ harden_linux_sshd_settings | combine(harden_linux_sshd_settings_user|default({})) }}"
  tags: [ harden, ssh, always ]

- name: Ensure sshd_config setting
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    regexp: "{{ item }}"
    line: "{{ harden_linux_sshd_settings[item] }}"
    state: "present"
    validate: '/usr/sbin/sshd -T -f %s'
  notify: "restart ssh"
  with_items:
    - "{{ harden_linux_sshd_settings | list }}"
  tags: [ harden, ssh, always ]

- name: Combine harden_linux_sysctl_settings and harden_linux_sysctl_settings_user (if defined)
  set_fact:
    harden_linux_sysctl_settings: "{{ harden_linux_sysctl_settings | combine(harden_linux_sysctl_settings_user|default({})) }}"
  tags: [ harden, sysctl, always ]

- name: Sysctl settings
  sysctl:
    name: "{{ item }}"
    value: "{{ harden_linux_sysctl_settings[item] }}"
    sysctl_set: yes
  with_items:
    - "{{ harden_linux_sysctl_settings | list }}"
  tags: [ harden, sysctl, always ]

- name: Update Sshguard white list
  lineinfile:
    dest: /etc/sshguard/whitelist
    regexp: "^{{ item }}"
    line: "{{ item }}"
    state: present
  with_items:
    - "{{ harden_linux_sshguard_whitelist }}"
  tags: [ harden, ssh, always ]

- name: Change root password
  user:
    name: "root"
    password: "{{ harden_linux_root_password }}"
  when: harden_linux_root_password is defined
  tags: [ harden, users, always ]
